package main

import "fmt"

/*

Even Fibonacci numbers

Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.

*/

//Fibonacci ...Return the n term of sequence
func Fibonacci(n int64) int64 {
	if n <= 1 {
		return n
	}
	return Fibonacci(n-1) + Fibonacci(n-2)
}

//SumOfEvenValueTerms ...Return the sum of even value terms that do not exceed limit
func SumOfEvenValueTerms(limit int64) int64 {
	term := int64(1)
	sum := int64(0)

	fib := Fibonacci(term)
	fmt.Printf("fib(%v): %v\n", term, fib)
	for ok := true; ok; ok = fib <= limit {
		sum += fib
		term++
		fib = Fibonacci(term)
		fmt.Printf("fib(%v): %v\n", term, fib)
	}
	return sum
}

func main() {
	limit := int64(5)
	sum := SumOfEvenValueTerms(limit)
	fmt.Printf("The sum of the even-valued terms that do not exceed %v is %v\n", limit, sum)
}
